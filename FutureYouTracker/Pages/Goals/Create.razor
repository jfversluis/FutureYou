@page "/goals/create"
@using FutureYouTracker.Models
@using FutureYouTracker.Services
@using Microsoft.AspNetCore.Components.Forms
@inject ITargetService TargetService
@inject NavigationManager Navigation

<PageTitle>Create Goal - FutureYou</PageTitle>

<div style="padding: 2rem; max-width: 800px; margin: 0 auto;">
    <div style="text-align: center; margin-bottom: 3rem;">
        <h1 style="font-size: 2.5rem; margin-bottom: 1rem;">‚ú® Create New Goal</h1>
        <p style="font-size: 1.1rem; color: #666; opacity: 0.9;">
            Transform your dream into a SMART goal that you can achieve
        </p>
    </div>

    <div style="background: white; padding: 2rem; border-radius: 0.75rem; box-shadow: 0 4px 16px rgba(0,0,0,0.1);">
        <EditForm Model="target" OnValidSubmit="HandleValidSubmit" FormName="CreateTarget">
            <DataAnnotationsValidator />
            
            <!-- Basic Information -->
            <div style="margin-bottom: 2rem;">
                <h3 style="color: #333; margin-bottom: 1rem; display: flex; align-items: center; gap: 0.5rem;">
                    üéØ <span>Basic Information</span>
                </h3>
                
                <div style="margin-bottom: 1.5rem;">
                    <label style="display: block; margin-bottom: 0.5rem; font-weight: 600; color: #333;">
                        Goal Title *
                    </label>
                    <InputText @bind-Value="target.Title" 
                               style="width: 100%; padding: 0.75rem; border: 1px solid #ddd; border-radius: 0.5rem; font-size: 1rem;"
                               placeholder="e.g., Learn Spanish fluency" />
                    <ValidationMessage For="() => target.Title" style="color: #d32f2f; font-size: 0.9rem; margin-top: 0.25rem;" />
                </div>

                <div style="margin-bottom: 1.5rem;">
                    <label style="display: block; margin-bottom: 0.5rem; font-weight: 600; color: #333;">
                        Description
                    </label>
                    <InputTextArea @bind-Value="target.Description" 
                                   style="width: 100%; padding: 0.75rem; border: 1px solid #ddd; border-radius: 0.5rem; font-size: 1rem; min-height: 100px; resize: vertical;"
                                   placeholder="Describe your goal in detail..." />
                    <ValidationMessage For="() => target.Description" style="color: #d32f2f; font-size: 0.9rem; margin-top: 0.25rem;" />
                </div>

                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem; margin-bottom: 1.5rem;">
                    <div>
                        <label style="display: block; margin-bottom: 0.5rem; font-weight: 600; color: #333;">
                            Category *
                        </label>
                        <InputSelect @bind-Value="target.Category" 
                                     style="width: 100%; padding: 0.75rem; border: 1px solid #ddd; border-radius: 0.5rem; font-size: 1rem;">
                            @foreach (TargetCategory category in Enum.GetValues<TargetCategory>())
                            {
                                <option value="@category">@category.GetDisplayName()</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="() => target.Category" style="color: #d32f2f; font-size: 0.9rem; margin-top: 0.25rem;" />
                    </div>

                    <div>
                        <label style="display: block; margin-bottom: 0.5rem; font-weight: 600; color: #333;">
                            Priority *
                        </label>
                        <InputSelect @bind-Value="target.Priority" 
                                     style="width: 100%; padding: 0.75rem; border: 1px solid #ddd; border-radius: 0.5rem; font-size: 1rem;">
                            @foreach (Priority priority in Enum.GetValues<Priority>())
                            {
                                <option value="@priority">@priority.GetDisplayName()</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="() => target.Priority" style="color: #d32f2f; font-size: 0.9rem; margin-top: 0.25rem;" />
                    </div>
                </div>

                <div style="margin-bottom: 1.5rem;">
                    <label style="display: block; margin-bottom: 0.5rem; font-weight: 600; color: #333;">
                        Due Date
                    </label>
                    <InputDate @bind-Value="target.DueDate" 
                               style="width: 100%; padding: 0.75rem; border: 1px solid #ddd; border-radius: 0.5rem; font-size: 1rem;" />
                </div>

                <div style="margin-bottom: 1.5rem;">
                    <label style="display: block; margin-bottom: 0.5rem; font-weight: 600; color: #333;">
                        Tags (comma-separated)
                    </label>
                    <InputText @bind-Value="target.Tags" 
                               style="width: 100%; padding: 0.75rem; border: 1px solid #ddd; border-radius: 0.5rem; font-size: 1rem;"
                               placeholder="e.g., language, personal, 2024" />
                    <ValidationMessage For="() => target.Tags" style="color: #d32f2f; font-size: 0.9rem; margin-top: 0.25rem;" />
                </div>
            </div>

            <!-- SMART Framework -->
            <div style="margin-bottom: 2rem;">
                <h3 style="color: #333; margin-bottom: 1rem; display: flex; align-items: center; gap: 0.5rem;">
                    üéØ <span>SMART Goal Framework</span>
                </h3>
                <p style="color: #666; margin-bottom: 1.5rem; font-style: italic;">
                    Use the SMART framework to make your goal Specific, Measurable, Achievable, Relevant, and Time-bound.
                </p>

                <div style="margin-bottom: 1.5rem;">
                    <label style="display: block; margin-bottom: 0.5rem; font-weight: 600; color: #333;">
                        üìã Specific - What exactly do you want to achieve?
                    </label>
                    <InputTextArea @bind-Value="target.Specific" 
                                   style="width: 100%; padding: 0.75rem; border: 1px solid #ddd; border-radius: 0.5rem; font-size: 1rem; min-height: 80px; resize: vertical;"
                                   placeholder="Be specific about what you want to accomplish..." />
                    <ValidationMessage For="() => target.Specific" style="color: #d32f2f; font-size: 0.9rem; margin-top: 0.25rem;" />
                </div>

                <div style="margin-bottom: 1.5rem;">
                    <label style="display: block; margin-bottom: 0.5rem; font-weight: 600; color: #333;">
                        üìä Measurable - How will you track progress?
                    </label>
                    <InputTextArea @bind-Value="target.Measurable" 
                                   style="width: 100%; padding: 0.75rem; border: 1px solid #ddd; border-radius: 0.5rem; font-size: 1rem; min-height: 80px; resize: vertical;"
                                   placeholder="Define how you'll measure success..." />
                    <ValidationMessage For="() => target.Measurable" style="color: #d32f2f; font-size: 0.9rem; margin-top: 0.25rem;" />
                </div>

                <div style="margin-bottom: 1.5rem;">
                    <label style="display: block; margin-bottom: 0.5rem; font-weight: 600; color: #333;">
                        üí™ Achievable - Is this goal realistic?
                    </label>
                    <InputTextArea @bind-Value="target.Achievable" 
                                   style="width: 100%; padding: 0.75rem; border: 1px solid #ddd; border-radius: 0.5rem; font-size: 1rem; min-height: 80px; resize: vertical;"
                                   placeholder="Explain why this goal is achievable..." />
                    <ValidationMessage For="() => target.Achievable" style="color: #d32f2f; font-size: 0.9rem; margin-top: 0.25rem;" />
                </div>

                <div style="margin-bottom: 1.5rem;">
                    <label style="display: block; margin-bottom: 0.5rem; font-weight: 600; color: #333;">
                        üéØ Relevant - Why is this goal important to you?
                    </label>
                    <InputTextArea @bind-Value="target.Relevant" 
                                   style="width: 100%; padding: 0.75rem; border: 1px solid #ddd; border-radius: 0.5rem; font-size: 1rem; min-height: 80px; resize: vertical;"
                                   placeholder="Describe why this goal matters to you..." />
                    <ValidationMessage For="() => target.Relevant" style="color: #d32f2f; font-size: 0.9rem; margin-top: 0.25rem;" />
                </div>

                <div style="margin-bottom: 1.5rem;">
                    <label style="display: block; margin-bottom: 0.5rem; font-weight: 600; color: #333;">
                        ‚è∞ Time-bound - What's your timeline?
                    </label>
                    <InputTextArea @bind-Value="target.TimeBound" 
                                   style="width: 100%; padding: 0.75rem; border: 1px solid #ddd; border-radius: 0.5rem; font-size: 1rem; min-height: 80px; resize: vertical;"
                                   placeholder="Define your timeline and deadlines..." />
                    <ValidationMessage For="() => target.TimeBound" style="color: #d32f2f; font-size: 0.9rem; margin-top: 0.25rem;" />
                </div>
            </div>

            <!-- Milestones -->
            <div style="margin-bottom: 2rem;">
                <h3 style="color: #333; margin-bottom: 1rem; display: flex; align-items: center; gap: 0.5rem;">
                    üèÜ <span>Milestones</span>
                </h3>
                <p style="color: #666; margin-bottom: 1.5rem;">
                    Break your goal into smaller, achievable milestones to track your progress.
                </p>

                @for (int i = 0; i < milestones.Count; i++)
                {
                    var index = i; // Capture for lambda
                    <div style="background: #f8f9fa; padding: 1rem; border-radius: 0.5rem; margin-bottom: 1rem; border-left: 4px solid #ffd54f;">
                        <div style="display: flex; justify-content: between; align-items: flex-start; gap: 1rem; margin-bottom: 1rem;">
                            <div style="flex: 1;">
                                <label style="display: block; margin-bottom: 0.5rem; font-weight: 600; color: #333;">
                                    Milestone @(index + 1) Title
                                </label>
                                <input type="text" @bind="milestones[index].Title" 
                                       style="width: 100%; padding: 0.5rem; border: 1px solid #ddd; border-radius: 0.25rem;"
                                       placeholder="e.g., Complete beginner course" />
                            </div>
                            <button type="button" @onclick="() => RemoveMilestone(index)" 
                                    style="background: #ff5252; color: white; border: none; padding: 0.5rem; border-radius: 0.25rem; cursor: pointer;">
                                üóëÔ∏è
                            </button>
                        </div>
                        
                        <div style="margin-bottom: 1rem;">
                            <label style="display: block; margin-bottom: 0.5rem; font-weight: 600; color: #333;">
                                Description
                            </label>
                            <textarea @bind="milestones[index].Description" 
                                      style="width: 100%; padding: 0.5rem; border: 1px solid #ddd; border-radius: 0.25rem; min-height: 60px; resize: vertical;"
                                      placeholder="Describe this milestone..."></textarea>
                        </div>
                        
                        <div>
                            <label style="display: block; margin-bottom: 0.5rem; font-weight: 600; color: #333;">
                                Due Date
                            </label>
                            <input type="date" @bind="milestones[index].DueDate" 
                                   style="padding: 0.5rem; border: 1px solid #ddd; border-radius: 0.25rem;" />
                        </div>
                    </div>
                }

                <button type="button" @onclick="AddMilestone" 
                        style="background: #4caf50; color: white; border: none; padding: 0.75rem 1.5rem; border-radius: 0.5rem; cursor: pointer;">
                    ‚ûï Add Milestone
                </button>
            </div>

            <!-- Form Actions -->
            <div style="display: flex; gap: 1rem; justify-content: flex-end; padding-top: 2rem; border-top: 1px solid #eee;">
                <button type="button" @onclick="Cancel" 
                        style="background: #f5f5f5; color: #333; border: 1px solid #ddd; padding: 0.75rem 1.5rem; border-radius: 0.5rem; cursor: pointer;">
                    Cancel
                </button>
                <button type="submit" disabled="@isSubmitting"
                        style="background: linear-gradient(135deg, #ffd54f 0%, #ffb300 100%); color: black; border: none; padding: 0.75rem 1.5rem; border-radius: 0.5rem; font-weight: 600; cursor: pointer; transition: all 0.2s;">
                    @if (isSubmitting)
                    {
                        <span>‚è≥ Creating Goal...</span>
                    }
                    else
                    {
                        <span>üöÄ Create Goal</span>
                    }
                </button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private Target target = new();
    private List<Milestone> milestones = new();
    private bool isSubmitting = false;

    private async Task HandleValidSubmit()
    {
        if (isSubmitting) return;
        
        isSubmitting = true;
        
        try
        {
            // Add milestones to target
            target.Milestones = milestones.Where(m => !string.IsNullOrWhiteSpace(m.Title)).ToList();
            
            await TargetService.CreateTargetAsync(target);
            Navigation.NavigateTo("/goals");
        }
        catch (Exception)
        {
            // Handle error - could show a toast or error message
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void AddMilestone()
    {
        milestones.Add(new Milestone());
    }

    private void RemoveMilestone(int index)
    {
        if (index >= 0 && index < milestones.Count)
        {
            milestones.RemoveAt(index);
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/goals");
    }
}